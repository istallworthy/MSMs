% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getModel.R
\name{getModel}
\alias{getModel}
\title{Fits outcome model}
\usage{
getModel(
  d,
  exposure,
  exposure_time_pts,
  outcome,
  epochs,
  exp_epochs,
  int_order,
  model,
  fam,
  covariates,
  verbose
)
}
\arguments{
\item{d}{wide data frame}

\item{exposure}{name of exposure variable}

\item{exposure_time_pts}{list of integers at which weights will be
created/assessed that correspond to time points when exposure was measured}

\item{outcome}{name of outcome variable with ".timepoint" suffix}

\item{epochs}{data frame of exposure epoch labels and values}

\item{int_order}{integer specification of highest order exposure main effects
interaction for interaction models}

\item{model}{character indicating one of the following outcome models:
\itemize{
\item "m0" (exposure main effects)
\item "m1" (exposure main effects & covariates)
\item "m2" (exposure main effects & their interactions)
\item "m3" (exposure main effects, their interactions, & covariates)
\item "covs" (covariate only model)
\item "int" (intercept only model)
}}

\item{fam}{function specification for svyglm model}

\item{covariates}{list of characters reflecting variable names of covariates
for covariate models}

\item{verbose}{TRUE or FALSE indicator for user output (default is TRUE)}
}
\value{
list of fitted model(s)
}
\description{
Fits outcome model
}
\examples{
test <- data.frame(ID = 1:50,
                   A.1 = rnorm(n = 50),
                   A.2 = rnorm(n = 50),
                   A.3 = rnorm(n = 50),
                   B.1 = rnorm(n = 50),
                   B.2 = rnorm(n = 50),
                   B.3 = rnorm(n = 50),
                   C = rnorm(n = 50),
                   D.3 = rnorm(n = 50))
test[, c("A.1", "A.2", "A.3")] <- lapply(test[, c("A.1", "A.2", "A.3")], as.numeric)

f <- createFormulas(exposure = "A",
                    exposure_time_pts = c(1, 2, 3),
                    outcome = "D.3",
                    tv_confounders = c("A.1", "A.2", "A.3", "B.1", "B.2", "B.3"),
                    ti_confounders = "C",
                    type = "full",
                    save.out = FALSE)

w <- createWeights(data = test,
                   exposure = "A",
                   outcome = "D.3",
                   tv_confounders = c("A.1", "A.2", "A.3", "B.1", "B.2", "B.3"),
                   formulas = f,
                   save.out = FALSE)

epochs = data.frame(epochs = c("Infancy", "Toddlerhood"),
                    values = I(list(c(1, 2), c(3))))
e <- apply(expand.grid("A", as.character(epochs[, 1])), 1,
           paste, sep = "", collapse = ".")
test$weights <- w[[1]]$weights

g <- getModel(d = test,
              exposure = "A",
              exposure_time_pts = c(1, 2, 3),
              outcome = "D.3",
              epochs = epochs,
              exp_epochs = e,
              fam = gaussian,
              model = "m0")
}
