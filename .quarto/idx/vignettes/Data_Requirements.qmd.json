{"title":"Data Requirements & Preparation","markdown":{"yaml":{"title":"Data Requirements & Preparation","date":"today","format":{"html":{"df_print":"kable","toc":true}},"vignette":"%\\VignetteIndexEntry{Data_Requirements} %\\VignetteEncoding{UTF-8}s %\\VignetteEngine{quarto::html}\n"},"headingText":"Data Requirements","containsRefs":false,"markdown":"\n\n```{r, include = FALSE, warning = FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  comment = \"#>\"\n)\n\noptions(rmarkdown.html_vignette.check_title = FALSE)\n```\n\nThis vignette is designed to aid users in preparing their data for use with *devMSMs*. Users should first view the <a href=\"https://istallworthy.github.io/devMSMs/articles/Terminology.html\">Terminology</a> and <a href=\"https://istallworthy.github.io/devMSMs/articles/Specify_Core_Inputs.html\">Specifying Core Inputs</a> vignettes.\n\nThe code contained in this vignette is also available, integrated code from the other vignettes, in the <a href=\"https://github.com/istallworthy/devMSMs/blob/main/ExampleWorkflow.Rmd\">ExampleWorkflow.rmd file</a>.\n\n\nWe recommend considering several data requirements prior to using *devMSMs* and any of the vignettes.\n\nMSMs are most useful for strengthening causal inference using longitudinal data that include an exposure and confounders that vary in time prior to an outcome. At a minimum, *devMSMs* requires two time point data with an exposure measured at least once and an outcome measured at the second time point, and at least one confounder. The exposure can be binary (with integer class) or continuous (with numeric class), and there are no assumptions about the distributions of outcome or confounders. We highly recommend using continuous variables when appropriate and possible to avoid the information loss inherent to binarizing a continuous variable. Although there is no gold standard recommendation, we suggest users select exposures that have some within-person variation from which it would be reasonable to delineate different histories of “high” and “low” levels and avoid extrapolation.\n\nThe outcome time point must be the last time point when exposure was measured or a time point after the last exposure measurement time point. For cases in which the outcome variable constitutes a growth process at the final time point, we advise choosing a reasonable measure for balancing purposes (e.g., baseline or average levels) before subsequently using the generated weights to separately conduct a weighted growth model of the outcome.\n\nWe advise the user to specify and include in the dataset any time invariant and time-varying variables that could possibly confound the relation between exposure and outcome. We also suggest using multiple measured variables within each construct to help reduce any effects from measurement bias (Kainz et al., 2017). Time varying confounders are ideal for maximizing the power of MSMs. Time-varying confounders could include developmental indicators that tend to track with the exposure over time that could also cause the outcome, including past levels of the exposure. Of note, the time points at which the confounders were collected must be equal to, or a subset of, the time points at which the exposure and outcome were collected in the data. In a perfect world, all exposures and potential confounders would be measured at all time points prior to the outcome. However, with real-world data due to planned and unplanned missingness, this is often not the case. Users should consider discussing the implications and limitations conferred by variables that could be confounders that were not collected at all time points. As a basis for specifying confounders, users should turn to the literature to delineate a causal model that lays out hypothesized relations between confounders, exposures, and outcome.\n\nWe advise users implement the appropriate preliminary steps, with the goal of assigning to 'data' one of the following wide data formats (see Figure 1) for use in the package:\n\n-   a single data frame of data in wide format with no missing data\n\n-   a mids object (output from `mice::mice()`) of data imputed in wide format\n\n-   a list of data imputed in wide format as data frames. <br>\n\nAs shown in Figure 1, for use of the *devMSMs* package, data in any of the above 3 formats, must be wide and contain an “ID” column for subject identifier and exposure, outcome, and all confounders as separate columns (as shown in Figure 1). Column names can include only underscore special characters and time-varying variables should have a suffix that consists of a period followed by the time point (e.g., “variable.6”). All variables should be classed as integer, numeric, or a factor (not character). Auxiliary or nuisance covariates that are not confounders (e.g, assessment version) can be included in the dataset for use and specification in the final modeling step (*Workflow* vignettes Step 5).\n\n<br> <br>\n\n<!-- ![Figure 1. Abridged example structure of a wide dataset formatted as required for the devMSMs. Column A denotes the ID variable, column B (green) denotes a time in-variant confounder (e.g., race, birth information), columns C - F denote two time-varying confounders (lighter yellow) at two different time points (e.g., age.1, age.2 and income.1, income.2, where .1 represents wave 1 and .2 represents wave 2). Columns G - I denote the exposure and outcome of interest (darker yellow), where G and H are time-varying values on each exposure, and column I is the outcome value at the final wave/timepoint. Missing data are denoted as *NA* and will need to be imputed (Step P2).](figures/sample_data.png){width=\"900px\"} -->\n\n```{r}\n#| echo: false\n#| tbl-cap: \"Abridged example structure of a wide dataset formatted as required for the devMSMs. Column A denotes the ID variable, column B (green) denotes a time in-variant confounder (e.g., race, birth information), columns C - F denote two time-varying confounders (lighter yellow) at two different time points (e.g., age.1, age.2 and income.1, income.2, where .1 represents wave 1 and .2 represents wave 2). Columns G - I denote the exposure and outcome of interest (darker yellow), where G and H are time-varying values on each exposure, and column I is the outcome value at the final wave/timepoint. Missing data are denoted as *NA* and will need to be imputed (Step P2).\"\n\nexample_df <- data.frame(\n  id = c(1, 2, 3),\n  ti_X = c(0.5, NA, 0.3),\n  tv_Y1.1 = c(50, 33, 68),\n  tv_Y1.2 = c(65, 57, NA),\n  tv_Y2.1 = c(NA, 0.08, 0.01),\n  tv_Y2.2 = c(0.04, 0.03, 0.02),\n  exposure.1 = c(3, 5, 6),\n  exposure.2 = c(4, 3, 8),\n  outcome.2 = c(80, 68, 59)\n)\n\nexample_df\n\n# tab = \ntinytable::tt(example_df) |>\n  tinytable::style_tt(i = 0, j = \"ti_X\", background = \"#E3EFDC\") |>\n  tinytable::style_tt(i = 0, j = c(\"tv_Y1.1\", \"tv_Y1.2\", \"tv_Y2.1\", \"tv_Y2.2\"), background = \"#FDF4CF\") |>\n  tinytable::style_tt(i = 0, j = c(\"exposure.1\", \"exposure.2\"), background = \"#d4a0fa\") |>\n  tinytable::style_tt(i = 0, j = c(\"outcome.2\"), background = \"#a0d8fa\")\n```\n\n<br>\n\n# Loading packages\n\n```{r, eval = FALSE}\n# install.packages(\"devtools\")\nrequire(devtools, quietly = TRUE)\nrequire(tinytable, quietly = TRUE)\n\ndevtools::install_github(\"istallworthy/devMSMs\", quiet = TRUE)\n\ndevtools::install_github(\"istallworthy/devMSMsHelpers\", quiet = TRUE)\nlibrary(devMSMsHelpers)\n\n```\n\n```{r, echo = FALSE, message = FALSE, warning = FALSE}\nif (!require(\"devtools\")) install.packages(\"devtools\", quiet = TRUE)\nif (!require(\"devMSMs\")) devtools::install_github(\"istallworthy/devMSMs\", quiet = TRUE)\n```\n\n<br>\n\n# Exploring *devMSMs* Package Data\n\nThe following longitudinal data that accompany *devMSMs* are simulated based on data from the Family Life Project (FLP), a longitudinal study following 1,292 families representative of two geographic areas (three counties in North Carolina and three counties in Pennsylvania) with high rural child poverty (Vernon-Feagans et al., 2013; Burchinal et al., 2008). We take the example exposure of economic strain (ESETA1) measured at 6, 15, 24, 35, and 58 months in relation to the outcome of behavior problems (StrDif_Tot) measured at 58 months.\n\n*devMSMs* (see *Workflows* vignettes) requires complete data in wide format (i.e., one row per individual, with and “ID” column for identifiers), in one of three ways:\n\n(1) a single data frame with no missing data;\n\n```{r}\ndata(\"sim_data_wide\", package = \"devMSMs\")\n\nhead(sim_data_wide, n = c(5, 10))\n```\n\n<br>\n\n(2) imputed data in the form of a mids object (output from `mice::mice()`);\n\n```{r}\nrequire(\"mice\", quietly = TRUE)\n\ndata(\"sim_data_mice\", package = \"devMSMs\")\n\nclass(sim_data_mice)\n\nhead(mice::complete(sim_data_mice, 1), n = c(5, 10))\n```\n\n<br>\n\n(3) imputed data as a list of imputed data frames.\n\n```{r}\ndata(\"sim_data_imp_list\", package = \"devMSMs\")\n\nhead(sim_data_imp_list[[1]], n = c(5, 10))\n```\n\n<br>\n\nThe helper functions (summarized in Table 1) for the following recommended preliminary steps can be found at this <a href=\"https://github.com/istallworthy/devMSMsHelpers\">Github</a>. Of note, *devMSMs* must also be installed and loaded to use these helper functions (see <a href=\"https://istallworthy.github.io/devMSMs/\">Installation</a>).\n\n<br>\n\n```{r}\n#| echo: false\n#| tbl-cap: \"Summary of *devMSMs* helper functions.\"\nhelper_functions <- data.frame(\n  Function = c(\n    \"`formatLongData()`\",\n    \"`formatWideData()`\",\n    \"`imputeData()`\",\n    \"`inspectData()`\"\n  ),\n  Purpose = c(\n    \"Format long data with the correct column names, variable classes, and missingness indicators.\",\n    \"Format wide data with the correct column names, variable classes, and missingness indicators.\",\n    \"Wrapper for `mice::mice` to multiply impute wide data.\",\n    \"Summarizes data and the distribution of the sample across user-specified exposure histories.\"\n  ),\n  `Required Input` = c(\n    \"(long) `data`, `exposure`, `exposure_time_pts`, `outcome`\",\n    \"(wide) `data`, `exposure`, `exposure_time_pts`, `outcome`\",\n    \"(wide) `data`, `exposure`, `outcome`\",\n    \"`data`, `exposure`, `exposure_time_pts`, `outcome`\"\n  ),\n  Output = c(\n    \"A data frame of formatted long data.\\n\\nSummary statistics.\",\n    \"A data frame of formatted wide data.\\n\\nSummary statistics.\",\n    \"A `mids` object of imputed data\",\n    \"Weights object\\n\\nHistogram & summary of balancing weights.\"\n  )\n)\n\ntinytable::tt(helper_functions, theme = \"striped\") |>\n  format(markdown = TRUE)\n```\n\nWe first install the *devMSMs* and *devMSMsHelpers* packages.\n\n```{r, eval = FALSE}\ninstall.packages(\"devtools\")\nrequire(devtools, quietly = TRUE)\ndevtools::install_github(\"istallworthy/devMSMs\", quiet = TRUE)\ndevtools::install_github(\"istallworthy/devMSMsHelpers\", quiet = TRUE)\n```\n\n```{r, echo = FALSE, message = FALSE, warning = FALSE}\nif (!require(\"devtools\")) install.packages(\"devtools\", quiet = TRUE)\nif (!require(\"devMSMs\")) devtools::install_github(\"istallworthy/devMSMs\", quiet = TRUE)\nif (!require(\"devMSMsHelpers\")) devtools::install_github(\"istallworthy/devMSMsHelpers\", quiet = TRUE)\n```\n\n```{r setup}\nlibrary(devMSMs)\nlibrary(devMSMsHelpers)\n```\n\n<br>\n\nPreliminary steps P1 (formulate hypotheses) and P2 (create a DAG) are detailed further in the accompanying manuscript. These following recommended preliminary steps are designed to assist the user in preparing and inspecting their data to ensure appropriate use of the package.\n\n# P3. Specify Core Inputs\n\nPlease see the <a href=\"https://istallworthy.github.io/devMSMs/articles/Specify_Core_Inputs.html\">Specifying Core Inputs vignette</a> for more detail on the following core inputs. Here, we use ESETA1, a measure of economic strain experienced by the family, as the exposure and StrDif_Tot, or behavior problems measured by the SDQ, as the outcome.\n\n```{r}\nset.seed(1234)\n\nexposure = c(\"ESETA1.6\", \"ESETA1.15\", \"ESETA1.24\", \"ESETA1.35\", \"ESETA1.58\") \n\nti_conf =  c(\"state\", \"BioDadInHH2\", \"PmAge2\", \"PmBlac2\", \"TcBlac2\", \"PmMrSt2\", \"PmEd2\", \"KFASTScr\",\n             \"RMomAgeU\", \"RHealth\", \"HomeOwnd\", \"SWghtLB\", \"SurpPreg\", \"SmokTotl\", \"DrnkFreq\",\n             \"peri_health\", \"caregiv_health\", \"gov_assist\")\n\ntv_conf = c(\"SAAmylase.6\",\"SAAmylase.15\", \"SAAmylase.24\", \n            \"MDI.6\", \"MDI.15\",                                            \n            \"RHasSO.6\", \"RHasSO.15\", \"RHasSO.24\",\"RHasSO.35\",                                       \n            \"WndNbrhood.6\",\"WndNbrhood.24\", \"WndNbrhood.35\",                                     \n            \"IBRAttn.6\", \"IBRAttn.15\", \"IBRAttn.24\",                                   \n            \"B18Raw.6\", \"B18Raw.15\", \"B18Raw.24\",                                           \n            \"HOMEETA1.6\", \"HOMEETA1.15\", \"HOMEETA1.24\", \"HOMEETA1.35\",                            \n            \"InRatioCor.6\", \"InRatioCor.15\", \"InRatioCor.24\", \"InRatioCor.35\",                         \n            \"CORTB.6\", \"CORTB.15\", \"CORTB.24\",                                                                  \n            \"EARS_TJo.24\", \"EARS_TJo.35\",                                        \n            \"LESMnPos.24\", \"LESMnPos.35\",                                  \n            \"LESMnNeg.24\", \"LESMnNeg.35\",       \n            \"StrDif_Tot.35\", \n            \"fscore.35\")\n\n# home_dir = NA\n\noutcome <- \"StrDif_Tot.58\"\n```\n\n<br>\n\n# P.4 Data Preparation & Inspection\n\nSome helper functions have optional arguments to suppress saving output locally (`save.out` = FALSE) and printing it to the console ( `verbose` = FALSE). The defaults to both arguments are TRUE. Users must supply a path to a home directory if `save.out` = TRUE.\n\n```{r}\nsave.out <- FALSE\n\nverbose <- TRUE\n```\n\n<br>\n\nAs shown in Figure 2, users have several options for reading in data. They can begin this workflow with the following options:\\\n<br>\n\n-   (P4.1) long data: complete or with missingness that can be formatted and converted to wide data and (P4.3) imputed as needed\n-   (P4.2) wide data: complete or missingness that can be formatted and (P4.3) imputed as needed\\\n-   (P4.3) data already imputed in wide format can be read in as a list\n\n<br>\n\n![Figure 2. Schematic of recommended preliminary steps showing the transformation of the 3 different kinds of starting data (enumerated in bold) to the three kinds of data accepted by *devMSMs*.](figures/prelim_steps_overview.png){width=\"900px\"}\n\n<br> <br>\n\n## P4.1. Single Long Data Frame\n\nUsers beginning with a single data frame in long format (with or without missingness) can utilize a helper function `formatLongData()` to summarize exposure and outcome data and convert to required variable names.\n\nFirst, we load the simulated longitudinal data in long format (with missingness) that accompanies *devMSMs*. These data are simulated based on data from the Family Life Project (FLP), a longitudinal study following 1,292 families representative of two geographic areas (three counties in North Carolina and three counties in Pennsylvania) with high rural child poverty (Vernon-Feagans et al., 2013; Burchinal et al., 2008). We take the example exposure of economic strain (ESETA1) measured at 6, 15, 24, 35, and 58 months in relation to the outcome of behavior problems (StrDif_Tot) measured at 58 months.\n\n```{r}\ndata(\"sim_data_long_miss\", package = \"devMSMs\")\n\ndata_long <- sim_data_long_miss\n\nhead(data_long, n = c(5, 10))\n```\n\n<br>\n\n### P4.1a. Format Long Data\n\nFor long data that is not correctly formatted, `formatLongData()` allows the users to supply existing variables for time (`time_var`), ID (`id_var`), and missing data (`missing`) for re-naming according to what is required by the package. It also allows the user to submit variables that should be factors and integers, and the function classes any factor confounders (`factor_confounders`) as factors, integer confounders (`integer_confounders`) as integers in the data, and all others as numeric. The `sep` field allows you to specify a delimeter for the integer that indicates time point in the variable names.\n\nBelow, we format the simulated long FLP data.\n\n```{r}\nfactor_confounders <- c(\"state\", \"TcBlac2\", \"BioDadInHH2\", \"HomeOwnd\", \"PmBlac2\",\n                        \"PmMrSt2\", \"SurpPreg\", \"RHealth\", \"SmokTotl\", \"DrnkFreq\",\n                        \"RHasSO\")\n\ninteger_confounders <- c(\"KFASTScr\", \"PmEd2\", \"RMomAgeU\", \"SWghtLB\", \"peri_health\", \n                         \"caregiv_health\", \"gov_assist\", \"B18Raw\", \"EARS_TJo\", \"MDI\")\n\ndata_long_f <- formatLongData(\n  data = data_long,\n  exposure = exposure,\n  outcome = outcome,\n  sep = \"\\\\.\",\n  time_var = \"WAVE\",\n  id_var = \"ID\",\n  missing = NA,\n  factor_confounders = factor_confounders,\n  integer_confounders = integer_confounders,\n  home_dir = home_dir,\n  save.out = save.out\n)\n\nhead(data_long_f, n = c(5, 10))\n```\n\nWe get a descriptive statistics summary of the exposure, ESETA1, and the outcome, StrDif_Tot.58, for our visual inspections.\n\n<br>\n\n### P4.1b. Tranform Formatted Long Data to Wide\n\nUsers with correctly formatted data in long format have the option of using the following code to transform their data into wide format, to proceed to using the package (if there is no missing data) or imputing (with \\< 20% missing data MAR).\n\nWe then transform our newly formatted long data into wide format, specifying `idvar` as \"ID\", `timevar` as \"WAVE\", and supplying the time points (encompassing exposure, confounder, and outcome time points) in the data as 6, 15, 24, 35, and 58 to `times`.\n\n```{r}\nrequire(\"stats\", quietly = TRUE)\n\nsep <- \"\\\\.\"\nv <- sapply(strsplit(tv_conf[!grepl(\"\\\\:\", tv_conf)], sep), head, 1)\nv <- c(v[!duplicated(v)], sapply(strsplit(exposure[1], sep), head, 1))\n\ndata_wide_f <- stats::reshape(\n  data = data_long_f,\n  idvar = \"ID\",\n  v.names = v,\n  timevar = \"WAVE\",\n  times = c(6, 15, 24, 35, 58),\n  direction = \"wide\"\n)\n\ndata_wide_f <- data_wide_f[, colSums(is.na(data_wide_f)) < nrow(data_wide_f)]\n\nhead(data_wide_f, n = c(5, 10))\n```\n\n<br> <br>\n\n## P4.2. Single Wide Data Frame\n\nAlternatively, users could start with a single data frame of wide data (with or without missingness).\n\nBelow, we we load in a single complete, wide data frame simulated from FLP as an example.\n\n```{r}\ndata(\"sim_data_wide\", package = \"devMSMs\")\n\ndata_wide <- sim_data_wide\n\nhead(data_wide, n = c(5, 10))\n```\n\n<br>\n\nData with missingness is more common with human data. Below we read in simulated wide FLP data with missingness.\n\n```{r}\ndata(\"sim_data_wide_miss\", package = \"devMSMs\")\n\ndata_wide <- sim_data_wide_miss\n\nhead(data_wide, n = c(5, 10))\n```\n\n<br>\n\n### P4.2a. Format Wide Data\n\nUsers beginning with a single unformatted data frame in long format can utilize a helper function `formatWideData()` to summarize exposure and outcome data and convert to required variable names. `formatWideData()` allows the users to supply existing variables for ID (`id_var`) and missing data (`missing`) for re-naming according to what is required by the package. It also allows the user to submit variables that should be factors and integers, and the function classes any factor confounders (`factor_confounders`) as factors, integer confounders (`integer_confounders`) as integers in the data, and all others as numeric. The user can also specify a time point delimeter (`sep`).\n\nBelow, we format the simulated wide FLP data by listing out variables to make into factors and integers in wide format (e.g., \"variable.t\"), as well as the ID and missingness indicators.\n\n```{r}\nfactor_confounders <- c(\n  \"state\", \"TcBlac2\", \"BioDadInHH2\", \"HomeOwnd\", \"PmBlac2\",\n  \"PmMrSt2\", \"SurpPreg\", \"RHealth\", \"SmokTotl\", \"DrnkFreq\",\n  \"RHasSO.6\", \"RHasSO.15\", \"RHasSO.24\", \"RHasSO.35\"\n)\n\ninteger_confounders <- c(\n  \"KFASTScr\", \"PmEd2\", \"RMomAgeU\", \"SWghtLB\", \"peri_health\", \"caregiv_health\",\n  \"gov_assist\", \"B18Raw.6\", \"B18Raw.15\", \"B18Raw.24\",\n  \"EARS_TJo.24\", \"EARS_TJo.35\", \"MDI.6\", \"MDI.15\"\n)\n\ndata_wide_f <- formatWideData(\n  data = data_wide, \n  exposure = exposure, \n  outcome = outcome,\n  sep = \"\\\\.\",\n  id_var = \"ID\",\n  missing = NA,\n  factor_confounders = factor_confounders,\n  integer_confounders = integer_confounders,\n  home_dir = home_dir, \n  save.out = save.out\n)\n\nhead(data_wide_f, n = c(5, 10))\n```\n\n<br> <br>\n\n## P4.3. Formatted Wide Data with Missingness\n\nThe functions of the *devMSMs* package accept data in the form of a single data frame with no missing values or *m* imputed datasets in the form of either a mids object (output from the mice package or via `imputeData()`) or a list of imputed datasets. Most developmental data from humans will have some amount of missing data. Given that the creation of IPTW balancing weights requires complete data, we recommend imputing data. Imputation assumes a missing data mechanism of missing at random (MAR) and no more than 20% missing data in total (Leyrat et al., 2021). Given existing work demonstrating its superiority, *devMSMS* implements the ‘within’ approach for imputed data, conducting all steps on each imputed dataset before pooling estimates using Rubin’s rules to create final average predictions and contrast comparisons in *Worfklows* vignettes Step 5 (Leyrat et al, 2021; Granger et al., 2019).\n\nAs shown below, users can use a helper function to impute their wide data or impute elsewhere and read in the imputed data as a list for use with *devMSMs*.\n\n<br>\n\n### P4.3a. Multiply Impute Formatted, Wide Data Frame using MICE\n\nUsers have the option of using the helper `imputeData()` function to impute their correctly formatted wide data. This step can take a while to run. The user can specify how many imputed datasets to create (default m = 5). `imputeData()` draws on the `mice()` function from the *mice* package (van Buuren & Oudshoorn, 2011) to conduct multiple imputation by chained equations (mice). All other variables present in the dataset are used to impute missing data in each column.\n\nThe user can specify the imputation method through the `method` field drawing from the following list: “pmm” (predictive mean matching), “midastouch” (weighted predictive mean matching), “sample” (random sample from observed values), “rf” (random forest) or “cart” (classification and regression trees). Random forest imputation is the default given evidence for its efficiency and superior performance (Shah et al., 2014). Please review the *mice* documentation for more details.\\\nAdditionally, users can specify an integer value to `seed` in order to offset the random number generator in *mice()* and make reproducible imputations.\n\nThe parameter `read_imps_from_file` will allow you to read already imputed data in from local storage (TRUE) so as not to have to re-run this imputation code multiple times (FALSE; default). Users may use this parameter to supply their own mids object of imputed data from the *mice* package (with the title ‘all_imp.rds’). Be sure to inspect the console for any warnings as well as the resulting imputed datasets. Any variables that have missing data following imputation may need to be removed due to high collinearity and/or low variability.\n\nThe required inputs for this function are a data frame in wide format (formatted according to pre-requirements listed above), m number of imputed datasets to create, a path to the home directory (if `save.out` = TRUE), exposure (e.g., “variable”), and outcome (e.g., “variable.t”). The home directory path, exposure, and outcome should already be defined if the user completed the <a href=\"https://istallworthy.github.io/devMSMs/articles/Specify_Core_Inputs.html\">Specifying Core Inputs vignette</a>.\n\nThe optional inputs are as follows.\n\nThe user can specify an imputation method compatible with `mice()` (see above). Additionally, the user can specify in `maxit` the number of interactions for `mice::mice()` to conduct (default is 5). The user can also specify `para_proc`, a logical indicator indicating whether or not to speed up imputing using parallel processing (default = TRUE). This draws on 2 cores using functions from the *parallel*, *doRNG*, and *doParallel* packages.\n\nThe user may also specify any additional inputs accepted by `mice::mice()` and we advise consulting the <a href:=\"https://www.rdocumentation.org/packages/mice/versions/3.16.0/topics/mice\">\\[*mice* documentation\\]</a> for more information.\n\nThe user can also indicate if they have already created imputed datasets from this function and wish to read them in (`read_imps_from_file = TRUE` rather than recreate them (default).\n\nFor this example, we create 2 imputed datasets using the default random forest method and 0 iterations (just for illustrative purposes), set a seed for reproducibility, and assign the output to `data` for use with *devMSMs*. This code takes some time to run. (Note: given the challenges of imputing data from .rda files, we have set `m` = 2 and `maxit` = 0 here just for illustrative purposes. We recommend setting both `m` = 5 and `maxit` = 5 (*mice* default) when running data.)\n\n```{r}\ns <- 1234\n\nm <- 2\n\nmethod <- \"rf\"\n\nmaxit <- 0\n\nimputed_data <- imputeData(\n  data = data_wide_f, \n  exposure = exposure, \n  outcome = outcome,\n  sep = \"\\\\.\",\n  m = m, \n  method = method, \n  maxit = maxit, \n  para_proc = FALSE,\n  seed = s, \n  read_imps_from_file = FALSE,\n  home_dir = home_dir, \n  save.out = save.out\n)\n\nhead(mice::complete(imputed_data, 1), n = c(5, 10))\n\ndata <- imputed_data\n```\n\nWe inspect the output to the console for any warnings from `mice()`.\n\nThe mice object can now be assigned to `data` for use in the *deveMSMs* package (see *Workflows* vignettes).\n\n<br>\n\n### P4.3b. Read in as a List of Wide Imputed Data Saved Locally\n\nAlternatively, if a user has imputed datasets already created from wide, formatted data using a program other than *mice*, they can read in, as a list, files saved locally as .csv files in a single folder. This list can be assigned to `data` for use in the *deveMSMs* package (see *Workflows* vignettes).\n\nBelow, we load in a list of imputed data simulated from FLP, as an example. (See the example Rmarkdown file for code to do this with files saved locally.)\n\n```{r}\ndata(\"sim_data_imp_list\", package = \"devMSMs\")\n\ndata <- sim_data_imp_list\n\nhead(data[[1]], n = c(5, 10))\n```\n\n<br> <br>\n\n# References\n\nBurchinal, M., Howes, C., Pianta, R., Bryant, D., Early, D., Clifford, R., & Barbarin, O. (2008). Predicting Child Outcomes at the End of Kindergarten from the Quality of Pre-Kindergarten Teacher–Child Interactions and Instruction. Applied Developmental Science, 12(3), 140–153. https://doi.org/10.1080/10888690802199418\n\nKainz, K., Greifer, N., Givens, A., Swietek, K., Lombardi, B. M., Zietz, S., & Kohn, J. L. (2017). Improving Causal Inference: Recommendations for Covariate Selection and Balance in Propensity Score Methods. Journal of the Society for Social Work and Research, 8(2), 279–303. https://doi.org/10.1086/691464\n\nVernon-Feagans, L., Cox, M., Willoughby, M., Burchinal, M., Garrett-Peters, P., Mills-Koonce, R., Garrett-Peiers, P., Conger, R. D., & Bauer, P. J. (2013). The Family Life Project: An Epidemiological and Developmental Study of Young Children Living in Poor Rural Communities. Monographs of the Society for Research in Child Development, 78(5), i–150.\n","srcMarkdownNoYaml":"\n\n```{r, include = FALSE, warning = FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  comment = \"#>\"\n)\n\noptions(rmarkdown.html_vignette.check_title = FALSE)\n```\n\nThis vignette is designed to aid users in preparing their data for use with *devMSMs*. Users should first view the <a href=\"https://istallworthy.github.io/devMSMs/articles/Terminology.html\">Terminology</a> and <a href=\"https://istallworthy.github.io/devMSMs/articles/Specify_Core_Inputs.html\">Specifying Core Inputs</a> vignettes.\n\nThe code contained in this vignette is also available, integrated code from the other vignettes, in the <a href=\"https://github.com/istallworthy/devMSMs/blob/main/ExampleWorkflow.Rmd\">ExampleWorkflow.rmd file</a>.\n\n# Data Requirements\n\nWe recommend considering several data requirements prior to using *devMSMs* and any of the vignettes.\n\nMSMs are most useful for strengthening causal inference using longitudinal data that include an exposure and confounders that vary in time prior to an outcome. At a minimum, *devMSMs* requires two time point data with an exposure measured at least once and an outcome measured at the second time point, and at least one confounder. The exposure can be binary (with integer class) or continuous (with numeric class), and there are no assumptions about the distributions of outcome or confounders. We highly recommend using continuous variables when appropriate and possible to avoid the information loss inherent to binarizing a continuous variable. Although there is no gold standard recommendation, we suggest users select exposures that have some within-person variation from which it would be reasonable to delineate different histories of “high” and “low” levels and avoid extrapolation.\n\nThe outcome time point must be the last time point when exposure was measured or a time point after the last exposure measurement time point. For cases in which the outcome variable constitutes a growth process at the final time point, we advise choosing a reasonable measure for balancing purposes (e.g., baseline or average levels) before subsequently using the generated weights to separately conduct a weighted growth model of the outcome.\n\nWe advise the user to specify and include in the dataset any time invariant and time-varying variables that could possibly confound the relation between exposure and outcome. We also suggest using multiple measured variables within each construct to help reduce any effects from measurement bias (Kainz et al., 2017). Time varying confounders are ideal for maximizing the power of MSMs. Time-varying confounders could include developmental indicators that tend to track with the exposure over time that could also cause the outcome, including past levels of the exposure. Of note, the time points at which the confounders were collected must be equal to, or a subset of, the time points at which the exposure and outcome were collected in the data. In a perfect world, all exposures and potential confounders would be measured at all time points prior to the outcome. However, with real-world data due to planned and unplanned missingness, this is often not the case. Users should consider discussing the implications and limitations conferred by variables that could be confounders that were not collected at all time points. As a basis for specifying confounders, users should turn to the literature to delineate a causal model that lays out hypothesized relations between confounders, exposures, and outcome.\n\nWe advise users implement the appropriate preliminary steps, with the goal of assigning to 'data' one of the following wide data formats (see Figure 1) for use in the package:\n\n-   a single data frame of data in wide format with no missing data\n\n-   a mids object (output from `mice::mice()`) of data imputed in wide format\n\n-   a list of data imputed in wide format as data frames. <br>\n\nAs shown in Figure 1, for use of the *devMSMs* package, data in any of the above 3 formats, must be wide and contain an “ID” column for subject identifier and exposure, outcome, and all confounders as separate columns (as shown in Figure 1). Column names can include only underscore special characters and time-varying variables should have a suffix that consists of a period followed by the time point (e.g., “variable.6”). All variables should be classed as integer, numeric, or a factor (not character). Auxiliary or nuisance covariates that are not confounders (e.g, assessment version) can be included in the dataset for use and specification in the final modeling step (*Workflow* vignettes Step 5).\n\n<br> <br>\n\n<!-- ![Figure 1. Abridged example structure of a wide dataset formatted as required for the devMSMs. Column A denotes the ID variable, column B (green) denotes a time in-variant confounder (e.g., race, birth information), columns C - F denote two time-varying confounders (lighter yellow) at two different time points (e.g., age.1, age.2 and income.1, income.2, where .1 represents wave 1 and .2 represents wave 2). Columns G - I denote the exposure and outcome of interest (darker yellow), where G and H are time-varying values on each exposure, and column I is the outcome value at the final wave/timepoint. Missing data are denoted as *NA* and will need to be imputed (Step P2).](figures/sample_data.png){width=\"900px\"} -->\n\n```{r}\n#| echo: false\n#| tbl-cap: \"Abridged example structure of a wide dataset formatted as required for the devMSMs. Column A denotes the ID variable, column B (green) denotes a time in-variant confounder (e.g., race, birth information), columns C - F denote two time-varying confounders (lighter yellow) at two different time points (e.g., age.1, age.2 and income.1, income.2, where .1 represents wave 1 and .2 represents wave 2). Columns G - I denote the exposure and outcome of interest (darker yellow), where G and H are time-varying values on each exposure, and column I is the outcome value at the final wave/timepoint. Missing data are denoted as *NA* and will need to be imputed (Step P2).\"\n\nexample_df <- data.frame(\n  id = c(1, 2, 3),\n  ti_X = c(0.5, NA, 0.3),\n  tv_Y1.1 = c(50, 33, 68),\n  tv_Y1.2 = c(65, 57, NA),\n  tv_Y2.1 = c(NA, 0.08, 0.01),\n  tv_Y2.2 = c(0.04, 0.03, 0.02),\n  exposure.1 = c(3, 5, 6),\n  exposure.2 = c(4, 3, 8),\n  outcome.2 = c(80, 68, 59)\n)\n\nexample_df\n\n# tab = \ntinytable::tt(example_df) |>\n  tinytable::style_tt(i = 0, j = \"ti_X\", background = \"#E3EFDC\") |>\n  tinytable::style_tt(i = 0, j = c(\"tv_Y1.1\", \"tv_Y1.2\", \"tv_Y2.1\", \"tv_Y2.2\"), background = \"#FDF4CF\") |>\n  tinytable::style_tt(i = 0, j = c(\"exposure.1\", \"exposure.2\"), background = \"#d4a0fa\") |>\n  tinytable::style_tt(i = 0, j = c(\"outcome.2\"), background = \"#a0d8fa\")\n```\n\n<br>\n\n# Loading packages\n\n```{r, eval = FALSE}\n# install.packages(\"devtools\")\nrequire(devtools, quietly = TRUE)\nrequire(tinytable, quietly = TRUE)\n\ndevtools::install_github(\"istallworthy/devMSMs\", quiet = TRUE)\n\ndevtools::install_github(\"istallworthy/devMSMsHelpers\", quiet = TRUE)\nlibrary(devMSMsHelpers)\n\n```\n\n```{r, echo = FALSE, message = FALSE, warning = FALSE}\nif (!require(\"devtools\")) install.packages(\"devtools\", quiet = TRUE)\nif (!require(\"devMSMs\")) devtools::install_github(\"istallworthy/devMSMs\", quiet = TRUE)\n```\n\n<br>\n\n# Exploring *devMSMs* Package Data\n\nThe following longitudinal data that accompany *devMSMs* are simulated based on data from the Family Life Project (FLP), a longitudinal study following 1,292 families representative of two geographic areas (three counties in North Carolina and three counties in Pennsylvania) with high rural child poverty (Vernon-Feagans et al., 2013; Burchinal et al., 2008). We take the example exposure of economic strain (ESETA1) measured at 6, 15, 24, 35, and 58 months in relation to the outcome of behavior problems (StrDif_Tot) measured at 58 months.\n\n*devMSMs* (see *Workflows* vignettes) requires complete data in wide format (i.e., one row per individual, with and “ID” column for identifiers), in one of three ways:\n\n(1) a single data frame with no missing data;\n\n```{r}\ndata(\"sim_data_wide\", package = \"devMSMs\")\n\nhead(sim_data_wide, n = c(5, 10))\n```\n\n<br>\n\n(2) imputed data in the form of a mids object (output from `mice::mice()`);\n\n```{r}\nrequire(\"mice\", quietly = TRUE)\n\ndata(\"sim_data_mice\", package = \"devMSMs\")\n\nclass(sim_data_mice)\n\nhead(mice::complete(sim_data_mice, 1), n = c(5, 10))\n```\n\n<br>\n\n(3) imputed data as a list of imputed data frames.\n\n```{r}\ndata(\"sim_data_imp_list\", package = \"devMSMs\")\n\nhead(sim_data_imp_list[[1]], n = c(5, 10))\n```\n\n<br>\n\nThe helper functions (summarized in Table 1) for the following recommended preliminary steps can be found at this <a href=\"https://github.com/istallworthy/devMSMsHelpers\">Github</a>. Of note, *devMSMs* must also be installed and loaded to use these helper functions (see <a href=\"https://istallworthy.github.io/devMSMs/\">Installation</a>).\n\n<br>\n\n```{r}\n#| echo: false\n#| tbl-cap: \"Summary of *devMSMs* helper functions.\"\nhelper_functions <- data.frame(\n  Function = c(\n    \"`formatLongData()`\",\n    \"`formatWideData()`\",\n    \"`imputeData()`\",\n    \"`inspectData()`\"\n  ),\n  Purpose = c(\n    \"Format long data with the correct column names, variable classes, and missingness indicators.\",\n    \"Format wide data with the correct column names, variable classes, and missingness indicators.\",\n    \"Wrapper for `mice::mice` to multiply impute wide data.\",\n    \"Summarizes data and the distribution of the sample across user-specified exposure histories.\"\n  ),\n  `Required Input` = c(\n    \"(long) `data`, `exposure`, `exposure_time_pts`, `outcome`\",\n    \"(wide) `data`, `exposure`, `exposure_time_pts`, `outcome`\",\n    \"(wide) `data`, `exposure`, `outcome`\",\n    \"`data`, `exposure`, `exposure_time_pts`, `outcome`\"\n  ),\n  Output = c(\n    \"A data frame of formatted long data.\\n\\nSummary statistics.\",\n    \"A data frame of formatted wide data.\\n\\nSummary statistics.\",\n    \"A `mids` object of imputed data\",\n    \"Weights object\\n\\nHistogram & summary of balancing weights.\"\n  )\n)\n\ntinytable::tt(helper_functions, theme = \"striped\") |>\n  format(markdown = TRUE)\n```\n\nWe first install the *devMSMs* and *devMSMsHelpers* packages.\n\n```{r, eval = FALSE}\ninstall.packages(\"devtools\")\nrequire(devtools, quietly = TRUE)\ndevtools::install_github(\"istallworthy/devMSMs\", quiet = TRUE)\ndevtools::install_github(\"istallworthy/devMSMsHelpers\", quiet = TRUE)\n```\n\n```{r, echo = FALSE, message = FALSE, warning = FALSE}\nif (!require(\"devtools\")) install.packages(\"devtools\", quiet = TRUE)\nif (!require(\"devMSMs\")) devtools::install_github(\"istallworthy/devMSMs\", quiet = TRUE)\nif (!require(\"devMSMsHelpers\")) devtools::install_github(\"istallworthy/devMSMsHelpers\", quiet = TRUE)\n```\n\n```{r setup}\nlibrary(devMSMs)\nlibrary(devMSMsHelpers)\n```\n\n<br>\n\nPreliminary steps P1 (formulate hypotheses) and P2 (create a DAG) are detailed further in the accompanying manuscript. These following recommended preliminary steps are designed to assist the user in preparing and inspecting their data to ensure appropriate use of the package.\n\n# P3. Specify Core Inputs\n\nPlease see the <a href=\"https://istallworthy.github.io/devMSMs/articles/Specify_Core_Inputs.html\">Specifying Core Inputs vignette</a> for more detail on the following core inputs. Here, we use ESETA1, a measure of economic strain experienced by the family, as the exposure and StrDif_Tot, or behavior problems measured by the SDQ, as the outcome.\n\n```{r}\nset.seed(1234)\n\nexposure = c(\"ESETA1.6\", \"ESETA1.15\", \"ESETA1.24\", \"ESETA1.35\", \"ESETA1.58\") \n\nti_conf =  c(\"state\", \"BioDadInHH2\", \"PmAge2\", \"PmBlac2\", \"TcBlac2\", \"PmMrSt2\", \"PmEd2\", \"KFASTScr\",\n             \"RMomAgeU\", \"RHealth\", \"HomeOwnd\", \"SWghtLB\", \"SurpPreg\", \"SmokTotl\", \"DrnkFreq\",\n             \"peri_health\", \"caregiv_health\", \"gov_assist\")\n\ntv_conf = c(\"SAAmylase.6\",\"SAAmylase.15\", \"SAAmylase.24\", \n            \"MDI.6\", \"MDI.15\",                                            \n            \"RHasSO.6\", \"RHasSO.15\", \"RHasSO.24\",\"RHasSO.35\",                                       \n            \"WndNbrhood.6\",\"WndNbrhood.24\", \"WndNbrhood.35\",                                     \n            \"IBRAttn.6\", \"IBRAttn.15\", \"IBRAttn.24\",                                   \n            \"B18Raw.6\", \"B18Raw.15\", \"B18Raw.24\",                                           \n            \"HOMEETA1.6\", \"HOMEETA1.15\", \"HOMEETA1.24\", \"HOMEETA1.35\",                            \n            \"InRatioCor.6\", \"InRatioCor.15\", \"InRatioCor.24\", \"InRatioCor.35\",                         \n            \"CORTB.6\", \"CORTB.15\", \"CORTB.24\",                                                                  \n            \"EARS_TJo.24\", \"EARS_TJo.35\",                                        \n            \"LESMnPos.24\", \"LESMnPos.35\",                                  \n            \"LESMnNeg.24\", \"LESMnNeg.35\",       \n            \"StrDif_Tot.35\", \n            \"fscore.35\")\n\n# home_dir = NA\n\noutcome <- \"StrDif_Tot.58\"\n```\n\n<br>\n\n# P.4 Data Preparation & Inspection\n\nSome helper functions have optional arguments to suppress saving output locally (`save.out` = FALSE) and printing it to the console ( `verbose` = FALSE). The defaults to both arguments are TRUE. Users must supply a path to a home directory if `save.out` = TRUE.\n\n```{r}\nsave.out <- FALSE\n\nverbose <- TRUE\n```\n\n<br>\n\nAs shown in Figure 2, users have several options for reading in data. They can begin this workflow with the following options:\\\n<br>\n\n-   (P4.1) long data: complete or with missingness that can be formatted and converted to wide data and (P4.3) imputed as needed\n-   (P4.2) wide data: complete or missingness that can be formatted and (P4.3) imputed as needed\\\n-   (P4.3) data already imputed in wide format can be read in as a list\n\n<br>\n\n![Figure 2. Schematic of recommended preliminary steps showing the transformation of the 3 different kinds of starting data (enumerated in bold) to the three kinds of data accepted by *devMSMs*.](figures/prelim_steps_overview.png){width=\"900px\"}\n\n<br> <br>\n\n## P4.1. Single Long Data Frame\n\nUsers beginning with a single data frame in long format (with or without missingness) can utilize a helper function `formatLongData()` to summarize exposure and outcome data and convert to required variable names.\n\nFirst, we load the simulated longitudinal data in long format (with missingness) that accompanies *devMSMs*. These data are simulated based on data from the Family Life Project (FLP), a longitudinal study following 1,292 families representative of two geographic areas (three counties in North Carolina and three counties in Pennsylvania) with high rural child poverty (Vernon-Feagans et al., 2013; Burchinal et al., 2008). We take the example exposure of economic strain (ESETA1) measured at 6, 15, 24, 35, and 58 months in relation to the outcome of behavior problems (StrDif_Tot) measured at 58 months.\n\n```{r}\ndata(\"sim_data_long_miss\", package = \"devMSMs\")\n\ndata_long <- sim_data_long_miss\n\nhead(data_long, n = c(5, 10))\n```\n\n<br>\n\n### P4.1a. Format Long Data\n\nFor long data that is not correctly formatted, `formatLongData()` allows the users to supply existing variables for time (`time_var`), ID (`id_var`), and missing data (`missing`) for re-naming according to what is required by the package. It also allows the user to submit variables that should be factors and integers, and the function classes any factor confounders (`factor_confounders`) as factors, integer confounders (`integer_confounders`) as integers in the data, and all others as numeric. The `sep` field allows you to specify a delimeter for the integer that indicates time point in the variable names.\n\nBelow, we format the simulated long FLP data.\n\n```{r}\nfactor_confounders <- c(\"state\", \"TcBlac2\", \"BioDadInHH2\", \"HomeOwnd\", \"PmBlac2\",\n                        \"PmMrSt2\", \"SurpPreg\", \"RHealth\", \"SmokTotl\", \"DrnkFreq\",\n                        \"RHasSO\")\n\ninteger_confounders <- c(\"KFASTScr\", \"PmEd2\", \"RMomAgeU\", \"SWghtLB\", \"peri_health\", \n                         \"caregiv_health\", \"gov_assist\", \"B18Raw\", \"EARS_TJo\", \"MDI\")\n\ndata_long_f <- formatLongData(\n  data = data_long,\n  exposure = exposure,\n  outcome = outcome,\n  sep = \"\\\\.\",\n  time_var = \"WAVE\",\n  id_var = \"ID\",\n  missing = NA,\n  factor_confounders = factor_confounders,\n  integer_confounders = integer_confounders,\n  home_dir = home_dir,\n  save.out = save.out\n)\n\nhead(data_long_f, n = c(5, 10))\n```\n\nWe get a descriptive statistics summary of the exposure, ESETA1, and the outcome, StrDif_Tot.58, for our visual inspections.\n\n<br>\n\n### P4.1b. Tranform Formatted Long Data to Wide\n\nUsers with correctly formatted data in long format have the option of using the following code to transform their data into wide format, to proceed to using the package (if there is no missing data) or imputing (with \\< 20% missing data MAR).\n\nWe then transform our newly formatted long data into wide format, specifying `idvar` as \"ID\", `timevar` as \"WAVE\", and supplying the time points (encompassing exposure, confounder, and outcome time points) in the data as 6, 15, 24, 35, and 58 to `times`.\n\n```{r}\nrequire(\"stats\", quietly = TRUE)\n\nsep <- \"\\\\.\"\nv <- sapply(strsplit(tv_conf[!grepl(\"\\\\:\", tv_conf)], sep), head, 1)\nv <- c(v[!duplicated(v)], sapply(strsplit(exposure[1], sep), head, 1))\n\ndata_wide_f <- stats::reshape(\n  data = data_long_f,\n  idvar = \"ID\",\n  v.names = v,\n  timevar = \"WAVE\",\n  times = c(6, 15, 24, 35, 58),\n  direction = \"wide\"\n)\n\ndata_wide_f <- data_wide_f[, colSums(is.na(data_wide_f)) < nrow(data_wide_f)]\n\nhead(data_wide_f, n = c(5, 10))\n```\n\n<br> <br>\n\n## P4.2. Single Wide Data Frame\n\nAlternatively, users could start with a single data frame of wide data (with or without missingness).\n\nBelow, we we load in a single complete, wide data frame simulated from FLP as an example.\n\n```{r}\ndata(\"sim_data_wide\", package = \"devMSMs\")\n\ndata_wide <- sim_data_wide\n\nhead(data_wide, n = c(5, 10))\n```\n\n<br>\n\nData with missingness is more common with human data. Below we read in simulated wide FLP data with missingness.\n\n```{r}\ndata(\"sim_data_wide_miss\", package = \"devMSMs\")\n\ndata_wide <- sim_data_wide_miss\n\nhead(data_wide, n = c(5, 10))\n```\n\n<br>\n\n### P4.2a. Format Wide Data\n\nUsers beginning with a single unformatted data frame in long format can utilize a helper function `formatWideData()` to summarize exposure and outcome data and convert to required variable names. `formatWideData()` allows the users to supply existing variables for ID (`id_var`) and missing data (`missing`) for re-naming according to what is required by the package. It also allows the user to submit variables that should be factors and integers, and the function classes any factor confounders (`factor_confounders`) as factors, integer confounders (`integer_confounders`) as integers in the data, and all others as numeric. The user can also specify a time point delimeter (`sep`).\n\nBelow, we format the simulated wide FLP data by listing out variables to make into factors and integers in wide format (e.g., \"variable.t\"), as well as the ID and missingness indicators.\n\n```{r}\nfactor_confounders <- c(\n  \"state\", \"TcBlac2\", \"BioDadInHH2\", \"HomeOwnd\", \"PmBlac2\",\n  \"PmMrSt2\", \"SurpPreg\", \"RHealth\", \"SmokTotl\", \"DrnkFreq\",\n  \"RHasSO.6\", \"RHasSO.15\", \"RHasSO.24\", \"RHasSO.35\"\n)\n\ninteger_confounders <- c(\n  \"KFASTScr\", \"PmEd2\", \"RMomAgeU\", \"SWghtLB\", \"peri_health\", \"caregiv_health\",\n  \"gov_assist\", \"B18Raw.6\", \"B18Raw.15\", \"B18Raw.24\",\n  \"EARS_TJo.24\", \"EARS_TJo.35\", \"MDI.6\", \"MDI.15\"\n)\n\ndata_wide_f <- formatWideData(\n  data = data_wide, \n  exposure = exposure, \n  outcome = outcome,\n  sep = \"\\\\.\",\n  id_var = \"ID\",\n  missing = NA,\n  factor_confounders = factor_confounders,\n  integer_confounders = integer_confounders,\n  home_dir = home_dir, \n  save.out = save.out\n)\n\nhead(data_wide_f, n = c(5, 10))\n```\n\n<br> <br>\n\n## P4.3. Formatted Wide Data with Missingness\n\nThe functions of the *devMSMs* package accept data in the form of a single data frame with no missing values or *m* imputed datasets in the form of either a mids object (output from the mice package or via `imputeData()`) or a list of imputed datasets. Most developmental data from humans will have some amount of missing data. Given that the creation of IPTW balancing weights requires complete data, we recommend imputing data. Imputation assumes a missing data mechanism of missing at random (MAR) and no more than 20% missing data in total (Leyrat et al., 2021). Given existing work demonstrating its superiority, *devMSMS* implements the ‘within’ approach for imputed data, conducting all steps on each imputed dataset before pooling estimates using Rubin’s rules to create final average predictions and contrast comparisons in *Worfklows* vignettes Step 5 (Leyrat et al, 2021; Granger et al., 2019).\n\nAs shown below, users can use a helper function to impute their wide data or impute elsewhere and read in the imputed data as a list for use with *devMSMs*.\n\n<br>\n\n### P4.3a. Multiply Impute Formatted, Wide Data Frame using MICE\n\nUsers have the option of using the helper `imputeData()` function to impute their correctly formatted wide data. This step can take a while to run. The user can specify how many imputed datasets to create (default m = 5). `imputeData()` draws on the `mice()` function from the *mice* package (van Buuren & Oudshoorn, 2011) to conduct multiple imputation by chained equations (mice). All other variables present in the dataset are used to impute missing data in each column.\n\nThe user can specify the imputation method through the `method` field drawing from the following list: “pmm” (predictive mean matching), “midastouch” (weighted predictive mean matching), “sample” (random sample from observed values), “rf” (random forest) or “cart” (classification and regression trees). Random forest imputation is the default given evidence for its efficiency and superior performance (Shah et al., 2014). Please review the *mice* documentation for more details.\\\nAdditionally, users can specify an integer value to `seed` in order to offset the random number generator in *mice()* and make reproducible imputations.\n\nThe parameter `read_imps_from_file` will allow you to read already imputed data in from local storage (TRUE) so as not to have to re-run this imputation code multiple times (FALSE; default). Users may use this parameter to supply their own mids object of imputed data from the *mice* package (with the title ‘all_imp.rds’). Be sure to inspect the console for any warnings as well as the resulting imputed datasets. Any variables that have missing data following imputation may need to be removed due to high collinearity and/or low variability.\n\nThe required inputs for this function are a data frame in wide format (formatted according to pre-requirements listed above), m number of imputed datasets to create, a path to the home directory (if `save.out` = TRUE), exposure (e.g., “variable”), and outcome (e.g., “variable.t”). The home directory path, exposure, and outcome should already be defined if the user completed the <a href=\"https://istallworthy.github.io/devMSMs/articles/Specify_Core_Inputs.html\">Specifying Core Inputs vignette</a>.\n\nThe optional inputs are as follows.\n\nThe user can specify an imputation method compatible with `mice()` (see above). Additionally, the user can specify in `maxit` the number of interactions for `mice::mice()` to conduct (default is 5). The user can also specify `para_proc`, a logical indicator indicating whether or not to speed up imputing using parallel processing (default = TRUE). This draws on 2 cores using functions from the *parallel*, *doRNG*, and *doParallel* packages.\n\nThe user may also specify any additional inputs accepted by `mice::mice()` and we advise consulting the <a href:=\"https://www.rdocumentation.org/packages/mice/versions/3.16.0/topics/mice\">\\[*mice* documentation\\]</a> for more information.\n\nThe user can also indicate if they have already created imputed datasets from this function and wish to read them in (`read_imps_from_file = TRUE` rather than recreate them (default).\n\nFor this example, we create 2 imputed datasets using the default random forest method and 0 iterations (just for illustrative purposes), set a seed for reproducibility, and assign the output to `data` for use with *devMSMs*. This code takes some time to run. (Note: given the challenges of imputing data from .rda files, we have set `m` = 2 and `maxit` = 0 here just for illustrative purposes. We recommend setting both `m` = 5 and `maxit` = 5 (*mice* default) when running data.)\n\n```{r}\ns <- 1234\n\nm <- 2\n\nmethod <- \"rf\"\n\nmaxit <- 0\n\nimputed_data <- imputeData(\n  data = data_wide_f, \n  exposure = exposure, \n  outcome = outcome,\n  sep = \"\\\\.\",\n  m = m, \n  method = method, \n  maxit = maxit, \n  para_proc = FALSE,\n  seed = s, \n  read_imps_from_file = FALSE,\n  home_dir = home_dir, \n  save.out = save.out\n)\n\nhead(mice::complete(imputed_data, 1), n = c(5, 10))\n\ndata <- imputed_data\n```\n\nWe inspect the output to the console for any warnings from `mice()`.\n\nThe mice object can now be assigned to `data` for use in the *deveMSMs* package (see *Workflows* vignettes).\n\n<br>\n\n### P4.3b. Read in as a List of Wide Imputed Data Saved Locally\n\nAlternatively, if a user has imputed datasets already created from wide, formatted data using a program other than *mice*, they can read in, as a list, files saved locally as .csv files in a single folder. This list can be assigned to `data` for use in the *deveMSMs* package (see *Workflows* vignettes).\n\nBelow, we load in a list of imputed data simulated from FLP, as an example. (See the example Rmarkdown file for code to do this with files saved locally.)\n\n```{r}\ndata(\"sim_data_imp_list\", package = \"devMSMs\")\n\ndata <- sim_data_imp_list\n\nhead(data[[1]], n = c(5, 10))\n```\n\n<br> <br>\n\n# References\n\nBurchinal, M., Howes, C., Pianta, R., Bryant, D., Early, D., Clifford, R., & Barbarin, O. (2008). Predicting Child Outcomes at the End of Kindergarten from the Quality of Pre-Kindergarten Teacher–Child Interactions and Instruction. Applied Developmental Science, 12(3), 140–153. https://doi.org/10.1080/10888690802199418\n\nKainz, K., Greifer, N., Givens, A., Swietek, K., Lombardi, B. M., Zietz, S., & Kohn, J. L. (2017). Improving Causal Inference: Recommendations for Covariate Selection and Balance in Propensity Score Methods. Journal of the Society for Social Work and Research, 8(2), 279–303. https://doi.org/10.1086/691464\n\nVernon-Feagans, L., Cox, M., Willoughby, M., Burchinal, M., Garrett-Peters, P., Mills-Koonce, R., Garrett-Peiers, P., Conger, R. D., & Bauer, P. J. (2013). The Family Life Project: An Epidemiological and Developmental Study of Young Children Living in Poor Rural Communities. Monographs of the Society for Research in Child Development, 78(5), i–150.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"Data_Requirements.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","about":{"template":"trestles"},"navbar":{"right":[{"text":"Search","href":"#"},{"text":"GitHub","href":"https://github.com/istallworthy/devMSMs"}],"left":[{"text":"../Vignettes","href":"Assessing_Balance_Tv.qmd"}]},"title":"Data Requirements & Preparation","date":"today","vignette":"%\\VignetteIndexEntry{Data_Requirements} %\\VignetteEncoding{UTF-8}s %\\VignetteEngine{quarto::html}\n","df_print":"kable"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}